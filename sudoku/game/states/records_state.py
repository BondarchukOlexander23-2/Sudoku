import pygame
import sys
from typing import TYPE_CHECKING, Optional, List
from datetime import datetime

from .i_game_state import IGameState
from ...config import WINDOW_SIZE, WHITE, BLACK, BLUE, GRAY, GREEN
from ...models import Difficulty

if TYPE_CHECKING:
    from ..game import Game


class RecordsState(IGameState):
    """–°—Ç–∞–Ω –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∫–æ—Ä–¥—ñ–≤"""

    def __init__(self):
        self.selected_difficulty: Optional[Difficulty] = None
        self.records = []
        self.personal_stats = {}
        self.scroll_offset = 0
        self.max_scroll = 0
        self.difficulty_buttons = {}
        self.back_button = None
        self.records_loaded = False

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.button_height = 40
        self.record_height = 30
        self.records_per_page = 15
        self.header_height = 150

    def _initialize_buttons(self, font, small_font):
        difficulties = [None] + list(Difficulty)  # None = "–í—Å—ñ —Ä—ñ–≤–Ω—ñ"
        button_count = len(difficulties)
        total_spacing = 20  # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–∫–∏ —è–∫ —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —à–∏—Ä–∏–Ω–∏ –≤—ñ–∫–Ω–∞
        max_total_button_width = WINDOW_SIZE[0] * 0.9  # 90% —à–∏—Ä–∏–Ω–∏ –≤—ñ–∫–Ω–∞
        spacing = 10
        button_width = (max_total_button_width - spacing * (button_count - 1)) // button_count
        start_x = (WINDOW_SIZE[0] - ((button_width + spacing) * button_count - spacing)) // 2

        # –í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω—ñ –Ω–∞–∑–≤–∏
        difficulty_names = {
            None: "–í—Å—ñ —Ä—ñ–≤–Ω—ñ",
            Difficulty.EASY: "–õ–µ–≥–∫–∏–π",
            Difficulty.MEDIUM: "–°–µ—Ä–µ–¥–Ω—ñ–π",
            Difficulty.HARD: "–í–∞–∂–∫–∏–π"
        }

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
        self.difficulty_buttons = {}
        for i, difficulty in enumerate(difficulties):
            x = start_x + i * (button_width + spacing)
            rect = pygame.Rect(x, 80, button_width, self.button_height)

            if difficulty is not None:
                text = difficulty_names.get(difficulty, difficulty.name.capitalize())
            else:
                text = "–í—Å—ñ —Ä—ñ–≤–Ω—ñ"

            text_surface = small_font.render(text, True, WHITE)
            self.difficulty_buttons[difficulty] = (rect, text_surface)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –∑–ª—ñ–≤–∞ –≤–Ω–∏–∑—É
        self.back_button = (
            pygame.Rect(50, WINDOW_SIZE[1] - 60, 100, self.button_height),
            small_font.render("–ù–∞–∑–∞–¥", True, WHITE)
        )

    def _load_records(self, game: 'Game'):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–µ–∫–æ—Ä–¥–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        if not game.db_manager:
            self.records = []
            self.personal_stats = {}
            return

        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∫–æ—Ä–¥–∏
            self.records = game.get_leaderboard(self.selected_difficulty, limit=50)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.personal_stats = game.get_personal_stats()

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª
            visible_records = min(len(self.records), self.records_per_page)
            self.max_scroll = max(0, len(self.records) - visible_records)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ—Ä–¥—ñ–≤: {e}")
            self.records = []
            self.personal_stats = {}

    def _format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —á–∞—Å —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥"""
        minutes = seconds // 60
        seconds = seconds % 60
        return f"{minutes:02d}:{seconds:02d}"

    def _format_date(self, record) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –¥–∞—Ç—É —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥"""
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        date_value = None

        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
        if hasattr(record, 'date_completed') and record.date_completed:
            date_value = record.date_completed
        elif hasattr(record, 'created_at') and record.created_at:
            date_value = record.created_at
        elif hasattr(record, 'date_played') and record.date_played:
            date_value = record.date_played
        elif hasattr(record, 'timestamp') and record.timestamp:
            date_value = record.timestamp

        if not date_value or str(date_value) == "None":
            return "--"

        try:
            # –Ø–∫—â–æ —Ü–µ –≤–∂–µ –æ–±'—î–∫—Ç datetime
            if isinstance(date_value, datetime):
                return date_value.strftime("%d.%m.%Y %H:%M")

            # –Ø–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫, –ø—Ä–æ–±—É—î–º–æ –π–æ–≥–æ –ø–∞—Ä—Å–∏—Ç–∏
            date_str = str(date_value)

            # ISO —Ñ–æ—Ä–º–∞—Ç –∑ T
            if 'T' in date_str:
                date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            else:
                # –ü—Ä–æ–±—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç SQLite
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
                except ValueError:
                    try:
                        # –ë–µ–∑ —á–∞—Å—É
                        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    except ValueError:
                        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ä—è–¥–æ–∫
                        return date_str[:16] if len(date_str) > 16 else date_str

            return date_obj.strftime("%d.%m.%Y %H:%M")

        except Exception as e:
            print(f"Error formatting date {date_value}: {e}")
            return str(date_value)[:16] if len(str(date_value)) > 16 else str(date_value)

    def handle_event(self, event: pygame.event.Event, game: 'Game') -> None:
        if event.type == pygame.MOUSEBUTTONDOWN:
            x, y = pygame.mouse.get_pos()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if not self.difficulty_buttons:
                self._initialize_buttons(game.font, game.small_font)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            for difficulty, (rect, _) in self.difficulty_buttons.items():
                if rect.collidepoint(x, y):
                    if self.selected_difficulty != difficulty:
                        self.selected_difficulty = difficulty
                        self.records_loaded = False
                        self.scroll_offset = 0
                    break

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            if self.back_button and self.back_button[0].collidepoint(x, y):
                from .main_menu_state import MainMenuState
                game.set_state(MainMenuState())

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                from .main_menu_state import MainMenuState
                game.set_state(MainMenuState())
            elif event.key == pygame.K_UP:
                self.scroll_offset = max(0, self.scroll_offset - 1)
            elif event.key == pygame.K_DOWN:
                self.scroll_offset = min(self.max_scroll, self.scroll_offset + 1)

        elif event.type == pygame.MOUSEWHEEL:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–æ–º –º–∏—à—ñ
            self.scroll_offset = max(0, min(self.max_scroll, self.scroll_offset - event.y))

    def update(self, game: 'Game') -> None:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É"""
        if not self.records_loaded:
            self._load_records(game)
            self.records_loaded = True

    def render(self, surface: pygame.Surface, game: 'Game') -> None:
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∫–æ—Ä–¥—ñ–≤"""
        surface.fill(WHITE)

        # ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
        if not self.difficulty_buttons:
            self._initialize_buttons(game.font, game.small_font)

        # ‚úÖ –í–∏–Ω–µ—Å–µ–Ω–æ –≤ –æ–∫—Ä–µ–º—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        self._render_title(surface, game.font)  # –¥–æ–¥–∞–Ω–æ –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self._render_difficulty_buttons(surface, game.small_font)  #  –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        self._render_personal_stats(surface, game.small_font)  #  –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._render_table_headers(surface, game.small_font)  #  –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        self._render_records(surface, game.small_font)  #  —Å–∞–º—ñ –∑–∞–ø–∏—Å–∏
        self._render_back_button(surface)  #  –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self._render_scroll_info(surface, game.small_font)  #  —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É

    # ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
    def _render_title(self, surface, font):
        title_text = font.render("–¢–ê–ë–õ–ò–¶–Ø –†–ï–ö–û–†–î–Ü–í", True, BLACK)
        title_rect = title_text.get_rect(center=(WINDOW_SIZE[0] // 2, 30))
        surface.blit(title_text, title_rect)

    # ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (Easy, Medium, Hard)
    def _render_difficulty_buttons(self, surface, font):
        for difficulty, (rect, text_surface) in self.difficulty_buttons.items():
            color = GREEN if difficulty == self.selected_difficulty else BLUE  # üëâ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ –≤–∏–±—Ä–∞–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            pygame.draw.rect(surface, color, rect)
            pygame.draw.rect(surface, BLACK, rect, 2)
            text_rect = text_surface.get_rect(center=rect.center)
            surface.blit(text_surface, text_rect)

    # ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è (—ñ–≥—Ä–∏ + —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å)
    def _render_personal_stats(self, surface, font):
        if self.personal_stats and self.personal_stats.get('total_games', 0) > 0:
            stats_y = 130
            total_games = self.personal_stats.get('total_games', 0)
            avg_time = self.personal_stats.get('average_time', 0)
            stats_text = f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä: {total_games}, –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {self._format_time(avg_time)}"
            stats_surface = font.render(stats_text, True, BLACK)
            surface.blit(stats_surface, (50, stats_y))

    # ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ ("#", "–ß–∞—Å", —Ç–æ—â–æ)
    def _render_table_headers(self, surface, font):
        headers = ["#", "–ß–∞—Å", "–†—ñ–≤–µ–Ω—å", "–ü—ñ–¥–∫–∞–∑–æ–∫", "–î–∞—Ç–∞"]
        header_positions = [80, 150, 220, 320, 400]
        headers_y = self.header_height + 20

        for header, x_pos in zip(headers, header_positions):
            header_surface = font.render(header, True, BLACK)
            surface.blit(header_surface, (x_pos, headers_y))

        #  –ª—ñ–Ω—ñ—è –ø—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        pygame.draw.line(surface, GRAY, (50, headers_y + 25), (WINDOW_SIZE[0] - 50, headers_y + 25), 2)

    # ‚úÖ –û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∫–æ—Ä–¥—ñ–≤
    def _render_records(self, surface, font):
        if not self.records:
            # üëâ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î
            no_records_text = font.render("–†–µ–∫–æ—Ä–¥—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î", True, GRAY)
            no_records_rect = no_records_text.get_rect(center=(WINDOW_SIZE[0] // 2, WINDOW_SIZE[1] // 2))
            surface.blit(no_records_text, no_records_rect)
            return

        records_start_y = self.header_height + 55
        difficulty_names = {
            Difficulty.EASY: "–õ–µ–≥–∫–∏–π",
            Difficulty.MEDIUM: "–°–µ—Ä–µ–¥–Ω—ñ–π",
            Difficulty.HARD: "–í–∞–∂–∫–∏–π"
        }
        header_positions = [80, 150, 220, 320, 400]

        for i, record in enumerate(self.records[self.scroll_offset:self.scroll_offset + self.records_per_page]):
            y_pos = records_start_y + i * self.record_height

            if i % 2 == 1:
                #  –ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ä—è–¥–∫—ñ–≤ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —á–∏—Ç–∞–Ω–Ω—è
                row_rect = pygame.Rect(50, y_pos - 2, WINDOW_SIZE[0] - 100, self.record_height)
                pygame.draw.rect(surface, (245, 245, 245), row_rect)

            #  –î–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
            rank_text = font.render(str(self.scroll_offset + i + 1), True, BLACK)
            surface.blit(rank_text, (header_positions[0], y_pos))

            time_text = font.render(self._format_time(record.completion_time), True, BLACK)
            surface.blit(time_text, (header_positions[1], y_pos))

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .get() —É —Ä–∞–∑—ñ None, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ AttributeError
            difficulty = difficulty_names.get(record.difficulty, str(record.difficulty))
            diff_text = font.render(difficulty, True, BLACK)
            surface.blit(diff_text, (header_positions[2], y_pos))

            hints_text = font.render(str(record.hints_used), True, BLACK)
            surface.blit(hints_text, (header_positions[3], y_pos))

            date_text = font.render(self._format_date(record), True, BLACK)
            surface.blit(date_text, (header_positions[4], y_pos))

    # ‚úÖ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    def _render_back_button(self, surface):
        if self.back_button:
            rect, text_surface = self.back_button
            pygame.draw.rect(surface, BLUE, rect)
            pygame.draw.rect(surface, BLACK, rect, 2)
            text_rect = text_surface.get_rect(center=rect.center)
            surface.blit(text_surface, text_rect)

    # ‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–ø–∏—Å–∏ 1‚Äì10 –∑ 25)
    def _render_scroll_info(self, surface, font):
        if len(self.records) > self.records_per_page:
            scroll_text = f"–ó–∞–ø–∏—Å–∏ {self.scroll_offset + 1}-{min(self.scroll_offset + self.records_per_page, len(self.records))} –∑ {len(self.records)}"
            scroll_surface = font.render(scroll_text, True, GRAY)
            surface.blit(scroll_surface, (WINDOW_SIZE[0] - 250, WINDOW_SIZE[1] - 30))
